/*
Deployment script for BethanysPieShopHRM3

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ECommerceDemo"
:setvar DefaultFilePrefix "ECommerceDemo"
:setvar DefaultDataPath "C:\Users\Parth Akbari\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"
:setvar DefaultLogPath "C:\Users\Parth Akbari\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO

PRINT N'Creating [dbo].[ProdAttrDictionary]...';


GO
CREATE TYPE [dbo].[ProdAttrDictionary] AS TABLE (
    [ID]       INT            NOT NULL,
    [ProdAttr] NVARCHAR (250) NOT NULL);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [ProductId]       BIGINT        IDENTITY (1, 1) NOT NULL,
    [ProdCatId]       INT           NOT NULL,
    [ProdName]        VARCHAR (250) NOT NULL,
    [ProdDescription] VARCHAR (MAX) NULL,
    CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating [dbo].[ProductAttribute]...';


GO
CREATE TABLE [dbo].[ProductAttribute] (
    [ProductId]      BIGINT        NOT NULL,
    [AttributeId]    INT           NOT NULL,
    [AttributeValue] VARCHAR (250) NULL
);


GO
PRINT N'Creating [dbo].[ProductAttributeLookup]...';


GO
CREATE TABLE [dbo].[ProductAttributeLookup] (
    [AttributeId]   INT           IDENTITY (1, 1) NOT NULL,
    [ProdCatId]     INT           NOT NULL,
    [AttributeName] VARCHAR (250) NOT NULL,
    CONSTRAINT [PK_ProductAttributeLookup] PRIMARY KEY CLUSTERED ([AttributeId] ASC)
);


GO
PRINT N'Creating [dbo].[ProductCategory]...';


GO
CREATE TABLE [dbo].[ProductCategory] (
    [ProdCatId]    INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] VARCHAR (250) NULL,
    CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED ([ProdCatId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Product_ProductCategory]...';


GO
ALTER TABLE [dbo].[Product] WITH NOCHECK
    ADD CONSTRAINT [FK_Product_ProductCategory] FOREIGN KEY ([ProdCatId]) REFERENCES [dbo].[ProductCategory] ([ProdCatId]);


GO
PRINT N'Creating [dbo].[FK_ProductAttribute_Product]...';


GO
ALTER TABLE [dbo].[ProductAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductAttribute_Product] FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([ProductId]);


GO
PRINT N'Creating [dbo].[FK_ProductAttribute_ProductAttributeLookup]...';


GO
ALTER TABLE [dbo].[ProductAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductAttribute_ProductAttributeLookup] FOREIGN KEY ([AttributeId]) REFERENCES [dbo].[ProductAttributeLookup] ([AttributeId]);


GO
PRINT N'Creating [dbo].[FK_ProductAttributeLookup_ProductCategory]...';


GO
ALTER TABLE [dbo].[ProductAttributeLookup] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductAttributeLookup_ProductCategory] FOREIGN KEY ([ProdCatId]) REFERENCES [dbo].[ProductCategory] ([ProdCatId]);


GO
PRINT N'Creating [dbo].[sp_CreateProduct]...';


GO




CREATE PROCEDURE [dbo].[sp_CreateProduct]
	@PRODCTID BIGINT,
	@PRODDESCRIPTION VARCHAR(MAX),
	@PRODNAME VARCHAR(250),
	@PRODCATID INT,
	@ATTRVALUE  DBO.PRODATTRDICTIONARY READONLY,
	@ID INT OUTPUT
AS

	IF EXISTS (SELECT * FROM PRODUCT WHERE ProductId = @PRODCTID)
	BEGIN
		UPDATE PRODUCT
		SET PRODDESCRIPTION= @PRODDESCRIPTION,PRODNAME = @PRODNAME WHERE ProductId = @PRODCTID;

		UPDATE ProductAttribute
		SET AttributeValue = ATTR.ProdAttr
		FROM @ATTRVALUE ATTR WHERE ProductId = @prodctid AND AttributeId = ATTR.ID;

		SET @ID = @prodctid;
	END

	ELSE

	BEGIN
	   	INSERT INTO PRODUCT (PRODCATID,PRODNAME,PRODDESCRIPTION) VALUES(@PRODCATID,@PRODNAME,@PRODDESCRIPTION);
		SET @ID = SCOPE_IDENTITY();

		INSERT INTO [DBO].[PRODUCTATTRIBUTE] (PRODUCTID,ATTRIBUTEID,ATTRIBUTEVALUE)
		SELECT @ID,ATTR.ID,ATTR.PRODATTR FROM @ATTRVALUE ATTR;

	END


RETURN @id
GO
PRINT N'Creating [dbo].[sp_DeleteProduct]...';


GO





CREATE PROCEDURE [dbo].[sp_DeleteProduct]
	@PRODCTID BIGINT
AS
	DELETE FROM ProductAttribute WHERE ProductId=@PRODCTID;
	DELETE FROM Product WHERE ProductId=@PRODCTID;
RETURN 1;
GO
PRINT N'Creating [dbo].[sp_GetMasterData]...';


GO



CREATE PROCEDURE [dbo].sp_GetMasterData
AS
	SELECT * FROM ProductAttributeLookup;

	Select * from ProductCategory
RETURN 0
GO
PRINT N'Creating [dbo].[sp_GetProductByid]...';


GO


CREATE PROCEDURE [dbo].[sp_GetProductByid]
	@id int = 0
AS
Select * from Product P 
 where p.ProductId = @id;


Select * from ProductAttribute pa
inner join ProductAttributeLookup pal
on pa.AttributeId = pal.AttributeId
where ProductId = @id



RETURN
GO
PRINT N'Creating [dbo].[sp_GetProductList]...';


GO







CREATE PROCEDURE [dbo].[sp_GetProductList]
AS
	Select * from Product P 
left Join ProductAttribute PA 
on P.ProductId = PA.ProductId
left Join ProductAttributeLookup PL
On PL.AttributeId = PA.AttributeId
left join ProductCategory pc
on pc.ProdCatId = p.ProdCatId
GO

PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Product] WITH CHECK CHECK CONSTRAINT [FK_Product_ProductCategory];

ALTER TABLE [dbo].[ProductAttribute] WITH CHECK CHECK CONSTRAINT [FK_ProductAttribute_Product];

ALTER TABLE [dbo].[ProductAttribute] WITH CHECK CHECK CONSTRAINT [FK_ProductAttribute_ProductAttributeLookup];

ALTER TABLE [dbo].[ProductAttributeLookup] WITH CHECK CHECK CONSTRAINT [FK_ProductAttributeLookup_ProductCategory];


GO
PRINT N'Update complete.';


GO
